// <auto-generated />
using System;
using Infraestructura.LogicaAccesoDatos.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infraestructura.Migrations
{
    [DbContext(typeof(PedidoContext))]
    [Migration("20240516024513_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LogicaNegocio.Entidades.Articulo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Eliminado")
                        .HasColumnType("bit");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Articulos");
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("RazonSocial")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.Linea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArticuloId")
                        .HasColumnType("int");

                    b.Property<int>("IdPedido")
                        .HasColumnType("int");

                    b.Property<int?>("PedidoId")
                        .HasColumnType("int");

                    b.Property<int>("Unidades")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArticuloId");

                    b.HasIndex("PedidoId");

                    b.ToTable("Lineas");
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.Pedido", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Anulado")
                        .HasColumnType("bit");

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<double>("CostoTotal")
                        .HasColumnType("float");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<bool>("Entregado")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.ToTable("Pedidos");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Pedido");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<bool>("Eliminado")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PassHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("clienteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("clienteId");

                    b.ToTable("Usuarios");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Usuario");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.Comun", b =>
                {
                    b.HasBaseType("LogicaNegocio.Entidades.Pedido");

                    b.HasDiscriminator().HasValue("Comun");
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.Express", b =>
                {
                    b.HasBaseType("LogicaNegocio.Entidades.Pedido");

                    b.HasDiscriminator().HasValue("Express");
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.Admin", b =>
                {
                    b.HasBaseType("LogicaNegocio.Entidades.Usuario");

                    b.HasDiscriminator().HasValue("Admin");
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.Normal", b =>
                {
                    b.HasBaseType("LogicaNegocio.Entidades.Usuario");

                    b.HasDiscriminator().HasValue("Normal");
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.Articulo", b =>
                {
                    b.OwnsOne("LogicaNegocio.ValueObject.Precio", "Precio", b1 =>
                        {
                            b1.Property<int>("ArticuloId")
                                .HasColumnType("int");

                            b1.Property<double>("Value")
                                .HasColumnType("float")
                                .HasColumnName("Precio");

                            b1.HasKey("ArticuloId");

                            b1.ToTable("Articulos");

                            b1.WithOwner()
                                .HasForeignKey("ArticuloId");
                        });

                    b.OwnsOne("LogicaNegocio.ValueObject.CodigoBarras", "CodigoBarras", b1 =>
                        {
                            b1.Property<int>("ArticuloId")
                                .HasColumnType("int");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Codigo_de_barras");

                            b1.HasKey("ArticuloId");

                            b1.ToTable("Articulos");

                            b1.WithOwner()
                                .HasForeignKey("ArticuloId");
                        });

                    b.OwnsOne("LogicaNegocio.ValueObject.NombreArticulo", "Nombre", b1 =>
                        {
                            b1.Property<int>("ArticuloId")
                                .HasColumnType("int");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Nombre");

                            b1.HasKey("ArticuloId");

                            b1.ToTable("Articulos");

                            b1.WithOwner()
                                .HasForeignKey("ArticuloId");
                        });

                    b.Navigation("CodigoBarras")
                        .IsRequired();

                    b.Navigation("Nombre")
                        .IsRequired();

                    b.Navigation("Precio")
                        .IsRequired();
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.Cliente", b =>
                {
                    b.OwnsOne("LogicaNegocio.ValueObject.Cliente.Direccion", "Direccion", b1 =>
                        {
                            b1.Property<int>("ClienteId")
                                .HasColumnType("int");

                            b1.Property<string>("Calle")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Calle");

                            b1.Property<string>("Ciudad")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Ciudad");

                            b1.Property<double>("Distancia")
                                .HasColumnType("float")
                                .HasColumnName("Distancia");

                            b1.Property<int>("Numero")
                                .HasColumnType("int")
                                .HasColumnName("Numero");

                            b1.HasKey("ClienteId");

                            b1.ToTable("Clientes");

                            b1.WithOwner()
                                .HasForeignKey("ClienteId");
                        });

                    b.OwnsOne("LogicaNegocio.ValueObject.Cliente.RUT", "RUT", b1 =>
                        {
                            b1.Property<int>("ClienteId")
                                .HasColumnType("int");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("RUT");

                            b1.HasKey("ClienteId");

                            b1.ToTable("Clientes");

                            b1.WithOwner()
                                .HasForeignKey("ClienteId");
                        });

                    b.Navigation("Direccion")
                        .IsRequired();

                    b.Navigation("RUT")
                        .IsRequired();
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.Linea", b =>
                {
                    b.HasOne("LogicaNegocio.Entidades.Articulo", "Articulo")
                        .WithMany()
                        .HasForeignKey("ArticuloId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LogicaNegocio.Entidades.Pedido", null)
                        .WithMany("Lineas")
                        .HasForeignKey("PedidoId");

                    b.OwnsOne("LogicaNegocio.ValueObject.Precio", "Precio", b1 =>
                        {
                            b1.Property<int>("LineaId")
                                .HasColumnType("int");

                            b1.Property<double>("Value")
                                .HasColumnType("float")
                                .HasColumnName("Precio");

                            b1.HasKey("LineaId");

                            b1.ToTable("Lineas");

                            b1.WithOwner()
                                .HasForeignKey("LineaId");
                        });

                    b.Navigation("Articulo");

                    b.Navigation("Precio")
                        .IsRequired();
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.Pedido", b =>
                {
                    b.HasOne("LogicaNegocio.Entidades.Cliente", "Cliente")
                        .WithMany("pedidos")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("LogicaNegocio.ValueObject.FPedido", "FechaPedido", b1 =>
                        {
                            b1.Property<int>("PedidoId")
                                .HasColumnType("int");

                            b1.Property<DateTime>("FechaEntrega")
                                .HasColumnType("datetime2")
                                .HasColumnName("Fecha entrega");

                            b1.Property<DateTime>("FechaPedido")
                                .HasColumnType("datetime2")
                                .HasColumnName("Fecha pedido");

                            b1.HasKey("PedidoId");

                            b1.ToTable("Pedidos");

                            b1.WithOwner()
                                .HasForeignKey("PedidoId");
                        });

                    b.Navigation("Cliente");

                    b.Navigation("FechaPedido")
                        .IsRequired();
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.Usuario", b =>
                {
                    b.HasOne("LogicaNegocio.Entidades.Cliente", "cliente")
                        .WithMany()
                        .HasForeignKey("clienteId");

                    b.OwnsOne("LogicaNegocio.ValueObject.Usuario.NombreUsuario", "NombreCompleto", b1 =>
                        {
                            b1.Property<int>("UsuarioId")
                                .HasColumnType("int");

                            b1.Property<string>("Apellido")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Apellido");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Nombre");

                            b1.HasKey("UsuarioId");

                            b1.ToTable("Usuarios");

                            b1.WithOwner()
                                .HasForeignKey("UsuarioId");
                        });

                    b.OwnsOne("LogicaNegocio.ValueObject.Usuario.Password", "Password", b1 =>
                        {
                            b1.Property<int>("UsuarioId")
                                .HasColumnType("int");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Password");

                            b1.HasKey("UsuarioId");

                            b1.ToTable("Usuarios");

                            b1.WithOwner()
                                .HasForeignKey("UsuarioId");
                        });

                    b.Navigation("NombreCompleto")
                        .IsRequired();

                    b.Navigation("Password")
                        .IsRequired();

                    b.Navigation("cliente");
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.Cliente", b =>
                {
                    b.Navigation("pedidos");
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.Pedido", b =>
                {
                    b.Navigation("Lineas");
                });
#pragma warning restore 612, 618
        }
    }
}
